-- Backup existing data
CREATE TEMP TABLE slides_backup AS SELECT * FROM public.slides;

-- Drop existing table
DROP TABLE IF EXISTS public.slides;

-- Recreate table with all fields
CREATE TABLE public.slides (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now(),
    title text,
    image_url text,
    link_url text,
    updated_at timestamp with time zone DEFAULT now(),
    overlay_heading text DEFAULT '',
    overlay_description text DEFAULT '',
    button_text text DEFAULT '',
    button_url text DEFAULT ''
);

-- Restore data
INSERT INTO public.slides (id, created_at, title, image_url, link_url, updated_at)
SELECT id, created_at, title, image_url, link_url, updated_at
FROM slides_backup;

-- Reset the sequence
SELECT setval(pg_get_serial_sequence('public.slides', 'id'), coalesce(max(id), 1)) FROM public.slides;

-- Set up RLS policies
ALTER TABLE public.slides ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Enable read access for all users" ON public.slides
    FOR SELECT
    USING (true);

CREATE POLICY "Enable insert for authenticated users only" ON public.slides
    FOR INSERT
    TO authenticated
    WITH CHECK (true);

CREATE POLICY "Enable update for authenticated users only" ON public.slides
    FOR UPDATE
    TO authenticated
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Enable delete for authenticated users only" ON public.slides
    FOR DELETE
    TO authenticated
    USING (true);

-- Grant permissions
GRANT ALL ON public.slides TO postgres;
GRANT ALL ON public.slides TO authenticated;
GRANT SELECT ON public.slides TO anon;
GRANT USAGE ON SEQUENCE public.slides_id_seq TO authenticated;

-- Force schema reload
NOTIFY pgrst, 'reload schema';
SELECT pg_notify('pgrst', 'reload schema');
